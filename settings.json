{
    //----------------------------------------------------------
    // VSCode Settings.json
    // Update: 2022/11/16 10:55
    //----------------------------------------------------------

    // フォント
    "editor.fontFamily": "'PlemolJP', Consolas, monospace",
    // フォントサイズ
    "editor.fontSize": 16,
    // コードの一行が長くなるための可読性向上
    "editor.wordWrap": "off",
    // ミニマップはいらない
    "editor.minimap.enabled": false,
    // tabをデフォルトで4スペースにする
    "editor.tabSize": 4,
    // tabをスペースに変換する
    "editor.insertSpaces": true,
    // エディターで空白文字を表示する方法を制御します。'none'、'boundary' および 'all' が使用可能です。'boundary' オプションでは、単語間の単一スペースは表示されません。
    "editor.renderWhitespace": "none",
    // 時間のかかるフォーマットだとバグが出るのでfalse
    "editor.formatOnSave": false,
    //エディターで開くパンくずの設定
    "breadcrumbs.enabled": false,
    // 行番号を相対値で表示
    "editor.lineNumbers": "relative",
    //現在の行番号含めて強調表示する
    "editor.renderLineHighlight" : "all",
    // スニペットを候補の上部に表示する
    "editor.snippetSuggestions": "bottom",
    // プレフィックスが一致する場合はスニペットを挿入する
    "editor.tabCompletion": "on",
    "editor.cursorStyle": "line",
    "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
    // 差分比較時の空白文字扱いは無視
    "diffEditor.ignoreTrimWhitespace": false,

    //----------------------------------------------------------
    // vscode Gitの設定
    //----------------------------------------------------------
    "git.autofetch": true,
    "git.ignoreRebaseWarning": true,

    //----------------------------------------------------------
    // vscodeの作業環境の設定(おもにタブの設定をvimと近づけるために設定)
    //----------------------------------------------------------
    // エディターのラベルの書式を制御します。例としてこの設定を変更することでファイルの場所を理解しやすくなります:
    // - short: 'parent'
    // - medium: 'workspace/src/parent'
    // - long: '/home/user/workspace/src/parent'
    // - default: '.../parent', 　別タブで、同じタイトルを共有する場合や、相対的なワークスペース パス タブが無効になっている場合
    "workbench.editor.labelFormat": "short",
    // 任意の表示グループが開かれた場合に、そこにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループにもう一度開くのではなく、既に開いているエディターが表示されます。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください。
    "workbench.editor.revealIfOpen": true,
    // 開いているエディターをアイコンで表示するかどうかを制御します。これには、アイコンのテーマを有効にする必要もあります。
    "workbench.editor.showIcons": false,
    // 編集中のタブをハイライト
    "workbench.editor.highlightModifiedTabs": true,
    // エディターのタブの大きさを制御します。常に完全なエディター ラベルを表示するのに足りるタブの大きさを維持するには 'fit' を設定します。すべてのタブを一度に表示するには利用可能なスペースが足りない場合に、タブを縮小可能にするには 'shrink' を設定します。
    "workbench.editor.tabSizing": "shrink",
    // エディター タブの閉じるボタンの位置を制御するか、[off] に設定した場合に無効にします。
    "workbench.editor.tabCloseButton": "off",
    // todo エディターグループにアクティブなエディターが一つしか存在できない
    // 前のセッションからエディターが復元されていない場合に、起動時に表示するかどうかを制御します。'none' を選択するとエディターなしで開始します。'welcomepage' を選択するとウェルカム ページを開きます (既定)。'newuntitledfile' を選択すると新しい無題のファイルを開きます (空のワークスペースを開いているときのみ)。
    "workbench.startupEditor": "none",
    // エディターを開く場所を制御します。'left' または 'right' を選択すると現在アクティブになっているエディターの左または右にエディターを開きます。'first' または 'last' を選択すると現在アクティブになっているエディターとは別個にエディターを開きます。
    "workbench.editor.openPositioning": "first",
    // アクティビティバーでよけいなスペースを取られるのでfalse
    // "workbench.activityBar.visible": false,
    // サイドバーのツリー検索でデフォルトの挙動をoffにする
    "workbench.list.automaticKeyboardNavigation": false,
    // [開いているエディター] ウィンドウに表示するエディターの数。
    "explorer.openEditors.visible": 0,

    //----------------------------------------------------------
    //ワンセット
    //タブで見えるようにしないと何が開いているのかわからない
    "workbench.editor.showTabs": true,
    "workbench.editor.enablePreview": true,
    "workbench.editor.enablePreviewFromQuickOpen": true,
    // { "key": "cmd+w", "command": "workbench.action.closeeditorsingroup" }
    // { "key": "ctrl+tab", "command": "workbench.action.openpreviouseditorfromhistory" },
    // { "key": "ctrl+tab", "command": "workbench.action.quickopennavigatenext", "when": "inquickopen" },
    //----------------------------------------------------------

    //----------------------------------------------------------
    // vscodeのdebugの設定
    //----------------------------------------------------------
    // デバッグ中にエディターの行内に変数値を表示します
    "debug.inlineValues": "on",

    //----------------------------------------------------------
    // vscodeのterminalの設定
    //----------------------------------------------------------
    // 設定した場合、ターミナルで選択しているテキストはクリップボードにコピーされます。
    "terminal.integrated.copyOnSelection": true,
     // ターミナルのフォントサイズ
    // "terminal.integrated.fontSize": 9,

    //-----------------------------------------------------------------------------------------------------------
    // installした拡張の設定
    //-----------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------
    // vscode vimの設定
    //----------------------------------------------------------
    // systemのclipboardを使用します
    "vim.useSystemClipboard": true,
    // hlsearchは必要だと思う
    "vim.hlsearch": true,
    // 検索をするときに見やすいモッサりすることなければこのまま
    "vim.easymotion": true,
    // wordを* or + で検索するでしょ?
    "vim.visualstar": true,
    // 諸々のctrlキーを使った操作が有効になる
    "vim.useCtrlKeys": true,
    // ignore case in search patterns.
    "vim.ignorecase": true,
    // show where a / search matches as you type it.
    "vim.incsearch": true,
    // enable the sneak plugin for vim.
    "vim.sneak": false,
    // 移動
    "vim.whichwrap": "h,l,<,>,[,],{,}",
    // leaderキー設定
    "vim.leader": "<space>",
    // leaer->オペレータでCamel単位で選択
    "vim.camelCaseMotion.enable": true,
    // 折りたたみ箇所を開かないように変更
    "vim.foldfix": true,

    // 以下を追加
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            // ノーマルモードで[f]を押すとeasymotion発動
            "before": ["f"],
            "after": ["leader", "leader", "s"]
        }
    ],

    // 一文字目の色
    "vim.easymotionMarkerForegroundColorOneChar": "rgba(255,255,43,1)",
    // 背景色
    "vim.easymotionMarkerBackgroundColor"       : "rgba(70, 200, 40, 0.9)",
    // フォントの太さ
    "vim.easymotionMarkerFontWeight" : "Bold",
    // マーカーに使用される文字列
    "vim.easymotionKeys" : "asdfghjklwertyuio;",

    //----------------------------------------------------------
    // vscode vim autoSwitchInputMethodの設定
    //   参考: https://qiita.com/iuchi/items/9ddcfb48063fc5ab626c
    //         https://github.com/iuchim/zenhan
    //----------------------------------------------------------
    "vim.autoSwitchInputMethod.enable": true,
    "vim.autoSwitchInputMethod.defaultIM": "0",
    "vim.autoSwitchInputMethod.obtainIMCmd": "C:\\Tool\\zenhan\\bin64\\zenhan.exe 0",
    "vim.autoSwitchInputMethod.switchIMCmd": "C:\\Tool\\zenhan\\bin64\\zenhan.exe {im}",

    //----------------------------------------------------------
    // vscode vim keyBind(insert Mode)の設定
    //----------------------------------------------------------
    "vim.insertModeKeyBindings": [
        {
            // [jj]でNormal Modeに戻る
            "before": ["j", "j"],
            "after": ["<Esc>"]
        },
        {
            // [Ctrl + h]で左に移動
            "before": ["<C-h>"],
            "after": ["<Left>"]
        },
        {
            // [Ctrl + j]で下に移動
            "before": ["<C-j>"],
            "after": ["<Down>"]
        },
        {
            // [Ctrl + k]で上に移動
            "before": ["<C-k>"],
            "after": ["<Up>"]
        },
        {
            // [Ctrl + l]で右に移動
            "before": ["<C-l>"],
            "after": ["<Right>"]
        }
    ],

    //----------------------------------------------------------
    // vscode vim keyBind(normal Mode)の設定
    //----------------------------------------------------------
    "vim.normalModeKeyBindings": [
        {
            // [Y]でカーソル位置から行末までコピー
            "before": ["Y"],
            "after": ["y", "$"]
        },
        {
            // 前のタブを表示
            "before": ["C-h"],
            "commands": [ "workbench.action.previousEditor" ]
        },
        {
            // 次のタブを表示
            "before": ["C-l"],
            "commands": [ "workbench.action.nextEditor" ]
        },
        {
            // 前に戻る
            "before": ["C-o"],
            "commands": [ "workbench.action.navigateBack" ]
        },
        {
            // 次に進む
            "before": ["C-i"],
            "commands": [ "workbench.action.navigateForward" ]
        },
    ],

    //----------------------------------------------------------
    // vscode indent-Rainbowの設定
    //----------------------------------------------------------
    "indentRainbow.colors": [
        "rgba(255,255,20,0.1)",
        "rgba(255,55,255,0.1)",
        "rgba(35,240,255,0.1)"
    ],

    //----------------------------------------------------------
    // その他
    //----------------------------------------------------------
    

}